#!/usr/bin/env node
const app = require('../app'),
      debug = require('debug'),
      http = require('http'),
      {sequelize} = require('../models'),
      config = require('../config/config'),
      cluster = require('cluster');

if(cluster.isMaster) {
  let cpuCount = require('os').cpus().length;
  for(let i=0; i<cpuCount; i++) {
    cluster.schedulingPolicy = cluster.SCHED_NONE;
    cluster.fork();
  }
  cluster.on('exit', (worker) => {
    console.log('Worker' + worker.id + ' died :(');
    cluster.fork();
  });
} else {
  var port = normalizePort(config.serverPort);
  app.set('port', port);
  
  var server = http.createServer(app);
  
  // Add sequelize synchronization
  sequelize.sync()
    .then(() => {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  });
  
  function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
      // named pipe
      return val;
    }
    if (port >= 0) {
      // port number
      return port;
    }
    return false;
  }
  
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
      switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.info(`Listening on ${port} port.`);
  }
  
  let gcInterval;
  function init() {
    gcInterval = setInterval(() => { gcDo(); }, 60000);
  }
  function gcDo() {
    global.gc();
    clearInterval(gcInterval);
    init();
  }
  init();
}
